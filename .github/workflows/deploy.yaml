name: Deploy to VPS

on:
  push:
    branches:
      - main
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Install EF Core CLI
        run: dotnet tool install --global dotnet-ef

      - name: Install SQLCMD
        run: |
          # Install SQLCMD (SQL Server Command Line Tool) on Ubuntu
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev

      - name: Build the Project
        run: dotnet build --configuration Release

      - name: Backup Database Before Migrations
        run: |
          # Backup the SQL Server database before applying migrations
          echo "Backing up the database..."
          sqlcmd -S "${{ secrets.DB_HOST }}" -U "${{ secrets.DB_USERNAME }}" -P "${{ secrets.DB_PASSWORD }}" -Q "BACKUP DATABASE [${{ secrets.DB_NAME }}] TO DISK = N'/tmp/db-backup.bak'"

      - name: Apply Migrations Directly to the Database
        run: |
          # Apply migrations to the database
          echo "Applying migrations..."
          dotnet ef database update --connection "${{ secrets.DB_CONNECTION_STRING }}" --configuration Release --verbose
        continue-on-error: true

      - name: Check Migration Status and Restore If Needed
        run: |
          # Check if migration failed and restore the backup if needed
          if [ $? -ne 0 ]; then
            echo "Migration failed. Restoring database from backup..."
            sqlcmd -S "${{ secrets.DB_HOST }}" -U "${{ secrets.DB_USERNAME }}" -P "${{ secrets.DB_PASSWORD }}" -Q "RESTORE DATABASE [${{ secrets.DB_NAME }}] FROM DISK = N'/tmp/db-backup.bak' WITH REPLACE"
          else
            echo "Migration successful!"
          fi

      - name: Build and Tag Docker Image
        run: |
          docker build -t migrationdemo:latest -f $GITHUB_WORKSPACE/Dockerfile $GITHUB_WORKSPACE
          docker tag migrationdemo:latest ${{ secrets.DOCKER_USERNAME }}/migrationdemo:latest

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/migrationdemo:latest

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/migrationdemo:latest
            docker stop migrationdemo || true
            docker rm migrationdemo || true
            docker run -d -p 2002:8080 --name migrationdemo ${{ secrets.DOCKER_USERNAME }}/migrationdemo:latest
